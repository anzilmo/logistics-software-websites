"""
Django settings for testweb project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from logging import config
from pathlib import Path
import os
import logging
from celery import Celery


logger = logging.getLogger(__name__)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'your-production-secret-key-here-change-this')
logger.info(f"SECRET_KEY set: {'YES' if 'SECRET_KEY' in os.environ else 'NO (using default)'}")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
logger.info(f"DEBUG mode: {DEBUG}")

ALLOWED_HOSTS = ["127.0.0.1", "localhost", ".vercel.app", "logistics-software-websites.vercel.app"]


# Application definition

INSTALLED_APPS = [
    'whitenoise.runserver_nostatic',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'customer',
    'warehouse',
    "phonenumber_field",

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'testweb.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = "testweb.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}



# Override database for production if DATABASE_URL is set
logger.info(f"DATABASE_URL in os.environ: {'YES' if 'DATABASE_URL' in os.environ else 'NO'}")
if 'DATABASE_URL' in os.environ:
    logger.info(f"DATABASE_URL value (masked): {os.environ['DATABASE_URL'][:20]}...")
    try:
        import dj_database_url
        logger.info("dj_database_url imported successfully")
        DATABASES['default'] = dj_database_url.config(conn_max_age=600, ssl_require=True)
        logger.info("Database URL configured successfully")
        logger.info(f"Configured DATABASES: {DATABASES['default']}")
    except ImportError as e:
        logger.error(f"Failed to import dj_database_url: {e}")
        logger.error("This is likely the cause of the crash - dj_database_url not available")
    except Exception as e:
        logger.error(f"Failed to configure database URL: {e}")
        logger.error(f"DATABASE_URL full: {os.environ['DATABASE_URL']}")
else:
    logger.info("DATABASE_URL not set, using default SQLite configuration")

logger.info(f"Final database configuration: ENGINE={DATABASES['default']['ENGINE']}, NAME={DATABASES['default']['NAME']}")


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MEDIA_ROOT = BASE_DIR / "media"
MEDIA_URL = '/media/'


DEFAULT_FROM_EMAIL = "no-reply@yourcompany.com"
WAREHOUSE_NOTIFICATION_EMAIL = "ops@yourcompany.com"
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
SITE_URL = "http://127.0.0.1:8000"
# and configure EMAIL_BACKEND, SMTP settings, etc.


# from django.contrib.messages import constants as messages
# MESSAGE_TAGS = {
#     messages.DEBUG: "secondary",
#     messages.INFO: "info",
#     messages.SUCCESS: "success",
#     messages.WARNING: "warning",
#     messages.ERROR: "danger",
# }


CELERY_BROKER_URL = os.environ.get('REDIS_URL', "redis://localhost:6379/0")
CELERY_RESULT_BACKEND = os.environ.get('REDIS_URL', "redis://localhost:6379/1")

logger.info(f"Celery broker URL: {CELERY_BROKER_URL}")
logger.info(f"Celery result backend: {CELERY_RESULT_BACKEND}")
