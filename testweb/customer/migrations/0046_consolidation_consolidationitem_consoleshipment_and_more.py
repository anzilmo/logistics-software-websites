# Generated by Django 5.2.6 on 2025-10-13 06:04

import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models, connection


def create_consolidation_table_if_not_exists(apps, schema_editor):
    """Create Consolidation table only if it doesn't already exist."""
    table_name = 'customer_consolidation'
    if table_name not in connection.introspection.table_names():
        # Table doesn't exist, create it
        with connection.schema_editor() as schema_editor_inner:
            # Create the table manually since the model exists
            schema_editor_inner.execute("""
                CREATE TABLE customer_consolidation (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL REFERENCES auth_user(id),
                    total_cbm DECIMAL(12,4) NOT NULL DEFAULT 0,
                    total_volume_weight DECIMAL(12,3) NOT NULL DEFAULT 0,
                    total_gross_weight DECIMAL(12,3) NOT NULL DEFAULT 0,
                    chargeable_weight DECIMAL(12,3) NOT NULL DEFAULT 0,
                    chargeable_basis VARCHAR(32) NOT NULL DEFAULT 'volume',
                    price DECIMAL(12,2) NOT NULL DEFAULT 0,
                    currency VARCHAR(8) NOT NULL DEFAULT 'USD',
                    shipments_count INTEGER UNSIGNED NOT NULL DEFAULT 0,
                    status VARCHAR(16) NOT NULL DEFAULT 'confirmed',
                    selected_courier_id INTEGER NULL REFERENCES warehouse_courier(id),
                    selected_rate_id INTEGER NULL REFERENCES customer_courierrate(id),
                    selected_price DECIMAL(12,2) NULL,
                    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
                );
            """)


def create_consolidationitem_table_if_not_exists(apps, schema_editor):
    """Create ConsolidationItem table only if it doesn't already exist."""
    table_name = 'customer_consolidationitem'
    if table_name not in connection.introspection.table_names():
        # Table doesn't exist, create it
        with connection.schema_editor() as schema_editor_inner:
            # Create the table manually since the model exists
            schema_editor_inner.execute("""
                CREATE TABLE customer_consolidationitem (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    consolidation_id INTEGER NOT NULL REFERENCES customer_consolidation(id),
                    shipment_id INTEGER NOT NULL REFERENCES warehouse_shipment(id)
                );
            """)


def create_consoleshipment_table_if_not_exists(apps, schema_editor):
    """Create ConsoleShipment table only if it doesn't already exist."""
    table_name = 'customer_consoleshipment'
    if table_name not in connection.introspection.table_names():
        # Table doesn't exist, create it
        with connection.schema_editor() as schema_editor_inner:
            # Create the table manually since the model exists
            schema_editor_inner.execute("""
                CREATE TABLE customer_consoleshipment (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    shipment_id INTEGER NOT NULL REFERENCES warehouse_shipment(id),
                    action VARCHAR(32) NOT NULL,
                    note TEXT NOT NULL DEFAULT '',
                    created_by_id INTEGER NULL REFERENCES auth_user(id),
                    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
                );
            """)


class Migration(migrations.Migration):

    dependencies = [
        ('customer', '0045_delete_shipmentconsoleaction'),
        ('warehouse', '0029_alter_consolidation_owner'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RunPython(
            create_consolidation_table_if_not_exists,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.RunPython(
            create_consolidationitem_table_if_not_exists,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.RunPython(
            create_consoleshipment_table_if_not_exists,
            reverse_code=migrations.RunPython.noop,
        ),
    ]
